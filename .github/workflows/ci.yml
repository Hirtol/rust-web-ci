name: Build and push

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  build-artifacts:
    name: Build release assets
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Linux
          - { os: ubuntu-18.04, toolchain: stable, target: x86_64-unknown-linux-gnu, cross: false, arch: linux/amd64 }
          - { os: ubuntu-18.04, toolchain: stable, target: aarch64-unknown-linux-gnu, cross: true, arch: linux/arm64 }
          # Raspberry Pi
          - { os: ubuntu-18.04, toolchain: stable, target: armv7-unknown-linux-gnueabihf, cross: true, arch: linux/arm/v7 }

    steps:
      - uses: actions/checkout@master

      - uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.config.toolchain }}
          target: ${{ matrix.config.target }}
          profile: minimal
          override: true
          default: true

      - name: Cache Cargo Artifacts
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ matrix.config.target }}-artifacts-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.config.target }}
            ${{ runner.os }}-cargo-build

      - name: Install trunk & wasm-bindgen-cli
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.config.cross }}
          command: install
          args: trunk wasm-bindgen-cli --target ${{ matrix.config.target }}

      - name: Install SQLX
        run: |
          git clone https://github.com/Hirtol/sqlx
          cd sqlx
          if ${{ matrix.config.cross }}
          then
            cross install --git https://github.com/Hirtol/sqlx --target ${{ matrix.config.target }}
          else
            cargo install --git https://github.com/Hirtol/sqlx --target ${{ matrix.config.target }}
          fi
          cd ..

      - name: Tar bin files
        run: |
          mkdir artifacts
          cp ~/.cargo/bin/sqlx artifacts/
          cp ~/.cargo/bin/trunk artifacts/
          cp ~/.cargo/bin/wasm-bindgen artifacts/
          cp ~/.cargo/bin/wasm-bindgen-test-runner artifacts/
          cp ~/.cargo/bin/wasm2es6js artifacts/
          tar -cvf artifacts.tar artifacts

      - name: Upload backend binary artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: artifacts.tar

  build-docker:
    name: Build Docker image and push
    runs-on: ubuntu-latest
    needs: build-artifacts
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Download bin atrifacts
        uses: actions/download-artifact@v2
        with:
          name: artifacts

      - name: Untar artifacts
        run: |
          tar -xvf artifacts.tar

      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/rust-web-ci

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.ci
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
